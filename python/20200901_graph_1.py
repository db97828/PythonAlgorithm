"""
작성일: 2020-09-01
==============================================================================
문제: 팀 결성
학생들에게 0번부터 N번까지의 번호를 부여했따. 처음에는 모든 학생이 서로 다른 팀으로 구분되어,
총 N+1개의 팀이 존재한다. 이때 선생님은 '팀 합치기'연산과 '같은 팀 여부 확인'연산을 사용할 수 있다.
선생님이 M개의 연산을 수행할 수 있을 때, '같은 팀 여부 확인'연산에 대한 연산결과를 출력하는 프로그램 작성
==============================================================================
소요 시간: 00분
"""

#원소가 속한 집합 찾기
def find_parent(parent, x):
    if parent[x] != x:
        parent[x] = find_parent(parent, parent[x])
    return parent[x]

#원소가 속한 집합을 합치기
def union_parent(parent, a, b):
    a = find_parent(parent, a)
    b = find_parent(parent, b)
    if a < b:
        parent[b] = a
    else:
        parent[a] = b

n, m = map(int, input().split())
parent = [0] * (n + 1)              #부모 테이블 초기화

#부모 테이블상에서, 부모를 자기 자신으로 초기화
for i in range(0, n + 1):
    parent[i] = i

#각 연산을 하나씩 확인
for i in range(m):
    oper, a, b = map(int, input().split())
    #합집합 연산인 경우
    if oper == 0:
        union_parent(parent, a, b)
    #찾기 연산인 경우
    elif oper == 1:
        if find_parent(parent, a) == find_parent(parent, b):
            print('YES')
        else:
            print('NO')

"""
접근법: 내가 왜 이런 방식으로 문제를 해결했는지 작성
==============================================================================
다른 해결 방식: 다른 해결 방법
==============================================================================
개선점: 개선할 수 있는 부분
==============================================================================
노트: N,M 범위가 모두 100,000이상이므로 경로 압축 방식의 서로소 집합 자료구조를 이용하여 
시간 복잡도를 개선해야 한다.
"""