"""
작성일: 2020-09-02
==============================================================================
문제: 도시 분할 계획
마을은 M개의 집과 그 집들을 연결하는 M개의 길로 이루어져 있다. 길은 어느 방향으로든지 다닐 수 있다.
그리고 길마다 길을 유지하는데 드는 유지비가 있다.
마을의 이장은 마을을 2개의 분리된 마을로 분할할 계획을 세우고 있다. 마을을 분할할 때는 각 분리된 마을 아넹서
집들이 서로 연결되도록 분할해야 한다. 각 분리된 마을 안에 있는 임의의 두 집 사이에 경로가 항상 존재해야 한다.
마을에는 집이 하나 이상 있어야 한다.
분리된 두 마을 사이에 있는 길들은 필요가 없으니 없앨 수 있고, 분리도니 마을 안에서도 임의의 두 집 사이에 경로가 항상
존재하게 하면서 길을 더 없앨 수 있다.
나머지 길의 유지비의 합으 최소로 하고 싶다. 이것을 구하는 프로그램을 작성하시오
==============================================================================
소요 시간: 00분
"""

def find_parent(parent, x):
    if parent[x] != x:
        parent[x] = find_parent(parent, parent[x])
    return parent[x]

def union_parent(parent, a, b):
    a = find_parent(parent, a)
    b = find_parent(parent, b)
    if a < b:
        parent[b] = a
    else:
        parent[a] = b

v, e = map(int, input().split())
parent = [0] * (v + 1)

edges = []
result = 0

for i in range(1, v + 1):
    parent[i] = i

for _ in range(e):
    a, b, cost = map(int, input().split())
    edges.append((cost, a, b))

edges.sort()
last = 0            #최소 신장 트리에 포함되는 간선 중에서 가장 비용이 큰 간선

for edge in edges:
    cost, a, b = edge
    if find_parent(parent, a) != find_parent(parent, b):
        union_parent(parent, a, b)
        result += cost
        last = cost

print(result - last)            #최소 신장 트리에서 가장 비용이 큰 간선 제거
"""
접근법: 내가 왜 이런 방식으로 문제를 해결했는지 작성
==============================================================================
다른 해결 방식: 다른 해결 방법
==============================================================================
개선점: 개선할 수 있는 부분
==============================================================================
노트: 전체 그래프에서 2개의 최소 신장 트리 만들기 -> 크루스칼 알고리즘으로 최소 신장 트리 찾은 뒤
최소 신장 트리를 구성하는 간선 중에서 가장 비용이 큰 간선을 제거
"""