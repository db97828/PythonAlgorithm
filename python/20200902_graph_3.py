"""
작성일: 2020-09-02
==============================================================================
문제: 커리큘럼
총 N개의 강의를 듣고자 한다. 모든 강의는 1번부터 N번까지의 번호를 가진다.
토한 동시에 여러 개의 강의를 들을 수 있다고 가정한다.
N개의 강의 정보가 주어졌을 때, N개의 강의에 대하여 수강하기까지 걸리는 최소 시간을 각각 출력하라
==============================================================================
소요 시간: 00분
"""

from collections import deque
import copy

v = int(input())
indegree = [0] * (v + 1)    #각 노드의 진입차수 0으로 초기화

graph = [[] for i in range(v + 1)]      #각 노드에 연결된 간선 정보를 담기 위한 연결 리스트 초기화
time = [0] * (v + 1)                    #각 강의 시간을 0으로 초기화

for i in range(1, v + 1):
    data = list(map(int, input().split()))
    time[i] = data[0]
    for x in data[1:-1]:
        indegree[i] += 1
        graph[x].append(i)

def topology_sort():
    result = copy.deepcopy(time)        #알고리즘 수행 결과 담을 리스트
    q = deque()

    #처음 시작할 때는 진입차수가 0인 노드 큐에 삽입
    for i in range(1, v + 1):
        if indegree[i] == 0:
            q.append(i)

    #큐가 빌 때까지 반본
    while q:
        #큐에서 원소 꺼내기
        now = q.popleft()
        #해당 원소와 연결된 노드들의 진입차수에서 1 빼기
        for i in graph[now]:
            result[i] = max(result[i], result[now] + time[i])
            indegree[i] -= 1
            #새롭게 진입차수가 0이 되는 노드를 큐에 삽입
            if indegree[i] == 0:
                q.append(i)

    #결과 출력
    for i in range(1, v + 1):
        print(result[i])

topology_sort()

"""
접근법: 내가 왜 이런 방식으로 문제를 해결했는지 작성
==============================================================================
다른 해결 방식: 다른 해결 방법
==============================================================================
개선점: 개선할 수 있는 부분
==============================================================================
노트: 위상 정렬
"""