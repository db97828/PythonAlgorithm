"""
작성일: 2020-09-01
==============================================================================
문제: 위상 정렬 알고리즘 소스코드
==============================================================================
소요 시간: 00분
"""
from collections import deque

#노드의 개수와 간선의 개수를 입력받기
v, e = map(int, input().split())
#모든 노드에 대한 진입차수는 0으로 초기화
indegree = [0] * (v + 1)
#각 노드에 연결된 간선 정보를 담기 위한 연결 리스트(그래프) 초기화
graph = [[] for i in range(v + 1)]

#방향 그래프의 모든 간선 정보를 입력받기
for _ in range(e):
    a, b = map(int, input().split())
    graph[a].append(b)      #정점 A에서 B로 이동 가능
    #진입차수를 1 증가
    indegree[b] += 1

def topology_sort():
    result = []
    q = deque()

    #처음 시작할 때는 진입차수가 0인 노드를 큐에 삽입
    for i in range(1, v + 1):
        if indegree[i] == 0:
            q.append(i)

    #큐가 빌 때까지 반복
    while q:
        #큐에서 원소 꺼내기
        now = q.popleft()
        result.append(now)
        #해당 원소와 연결된 노드들의 진입차수에서 1 빼기
        for i in graph[now]:
            indegree[i] -= 1
            #새롭게 진입차수가 0이 되는 노드를 큐에 삽입
            if indegree[i] == 0:
                q.append(i)

    #위상 정렬을 수행한 결과 출력
    for i in result:
        print(i, end=' ')

topology_sort()

"""
접근법: 내가 왜 이런 방식으로 문제를 해결했는지 작성
==============================================================================
다른 해결 방식: 다른 해결 방법
==============================================================================
개선점: 개선할 수 있는 부분
==============================================================================
노트: 
플루이드도 경우의수가 정해진 경우 다익스트라 가능하다xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
반복변수 잘 설정하기(알아보기 쉽도록)
"""